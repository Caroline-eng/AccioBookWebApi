// <auto-generated />
using System;
using AccioBook.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccioBook.Data.Migrations
{
    [DbContext(typeof(AccioBookContext))]
    [Migration("20230106222120_AccioBook_1")]
    partial class AccioBook1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AccioBook.Domain.Entities.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.AuthorSearch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("Id_Author")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_User")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Author");

                    b.HasIndex("Id_User");

                    b.ToTable("AuthorsSearch");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Cover")
                        .HasColumnType("longtext");

                    b.Property<long>("Id_Author")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id_Author");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.BookSearch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("Id_Book")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_User")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Book");

                    b.HasIndex("Id_User");

                    b.ToTable("BooksSearch");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.Edition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ISBNCode_10")
                        .HasColumnType("longtext");

                    b.Property<string>("ISBNCode_13")
                        .HasColumnType("longtext");

                    b.Property<long>("Id_Book")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_Language")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_Publisher")
                        .HasColumnType("bigint");

                    b.Property<long>("PageCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Book");

                    b.HasIndex("Id_Language");

                    b.HasIndex("Id_Publisher");

                    b.ToTable("Editions");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.Publisher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<int>("UserGender")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.WishList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("Id_Book")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_User")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("IncludeDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Book");

                    b.HasIndex("Id_User");

                    b.ToTable("WishList");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.AuthorSearch", b =>
                {
                    b.HasOne("AccioBook.Domain.Entities.Author", "Author")
                        .WithMany("AuthorSearches")
                        .HasForeignKey("Id_Author")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccioBook.Domain.Entities.User", "User")
                        .WithMany("AuthorSearches")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.Book", b =>
                {
                    b.HasOne("AccioBook.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("Id_Author")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.BookSearch", b =>
                {
                    b.HasOne("AccioBook.Domain.Entities.Book", "Book")
                        .WithMany("BookSearches")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccioBook.Domain.Entities.User", "User")
                        .WithMany("BookSearches")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.Edition", b =>
                {
                    b.HasOne("AccioBook.Domain.Entities.Book", "Book")
                        .WithMany("Editions")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccioBook.Domain.Entities.Language", "Language")
                        .WithMany("Editions")
                        .HasForeignKey("Id_Language")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccioBook.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Editions")
                        .HasForeignKey("Id_Publisher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Language");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.WishList", b =>
                {
                    b.HasOne("AccioBook.Domain.Entities.Book", "Book")
                        .WithMany("WishLists")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccioBook.Domain.Entities.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.Author", b =>
                {
                    b.Navigation("AuthorSearches");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.Book", b =>
                {
                    b.Navigation("BookSearches");

                    b.Navigation("Editions");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.Language", b =>
                {
                    b.Navigation("Editions");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.Publisher", b =>
                {
                    b.Navigation("Editions");
                });

            modelBuilder.Entity("AccioBook.Domain.Entities.User", b =>
                {
                    b.Navigation("AuthorSearches");

                    b.Navigation("BookSearches");

                    b.Navigation("WishLists");
                });
#pragma warning restore 612, 618
        }
    }
}
